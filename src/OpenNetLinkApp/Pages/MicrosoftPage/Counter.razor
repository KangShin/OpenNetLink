@page "/MicrosoftPage/counter"

@using Microsoft.JSInterop
@using System.Text.Json
@using Serilog
@using Serilog.Events
@using AgLogManager

@inject IJSRuntime JSRuntime
@inject WebWindow Window

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> <br><br>
<button class="btn btn-primary" @onclick="ShowNotiSucc">Click me</button> <br><br>
<button class="btn btn-primary" @onclick="SendMessage">Send Message</button> <br><br> <br><br> <br><br>
<button class="btn btn-primary" @onclick="ChageLogLevel">Click me</button> <br><br>

@code {
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<Counter>();

    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
        CLog.Here().Information("Incremented count to {CurrentCount}", currentCount);
        Log.Information("Incremented count to {CurrentCount}", currentCount);

    }

    public async Task ShowNotiSucc()
    {
        await JSRuntime.InvokeAsync<string>("showNotiSucc","파일 전송을 완료 하였습니다.!!!");
        StateHasChanged();
    }

    void SendMessage()
    {
        string eventName = "DragNDrop";
        string args = "filelist/from/web";
        try
        {
            Window.Invoke(() =>
            {
                Window.SendMessage($"{eventName}:{JsonSerializer.Serialize(args)}");
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    void ChageLogLevel()
    {
        AgLog.LogLevelSwitch.MinimumLevel = LogEventLevel.Debug;
        Log.Information("Changed LogLevel to {LogLevel}", LogEventLevel.Debug.ToString());
    }
}
