@using System.IO
@using BlazorInputFile
@using System.Diagnostics

@inject IJSRuntime jsRuntime
@inject IFileReaderService fileReaderService
<DropTarget Drop="@OnDrop">
    <div class="dropzone col-md-12 p-0" style="overflow:auto;height:266px;">
        <InputFile id="fileInput" multiple title=""
                   @onclick="HandleClick"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave" />
        @if ((fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message" style="font-size:14px;">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message" style="font-size:14px;">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }
        <!-- height:100%;position:relative;left:0px;top:0px; -->
        <!--class="table table-head-fixed table-bordered table-hover mb-0" style="font-size: 14px; position: relative; left: 0px; top: 0px;" -->
        @if (selectedFiles != null && selectedFiles.Count > 0)
        {
            <table id="example2" class="table table-head-fixed table-bordered table-hover mb-0" style="font-size: 14px;">
                <thead>
                    <tr>
                        <th>이름</th>
                        <th>크기</th>
                        <th>유형</th>
                        <th>수정날짜</th>
                        <th>경로</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in selectedFiles)
                    {
                        <tr style="height:20px;">
                            <td>@file.Name</td>
                            <td>@file.Size</td>
                            <td>@file.Type</td>
                            <td>@file.LastModified</td>
                            <td>@file.RelativePath</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p style="font-size:15px;">
                <br /><br /><br /><br /><br /><br />파일을 이곳으로 드래그 하세요.<br /><br /><br /><br /><br /><br /><br /><br />
            </p>
        }
    </div>
</DropTarget>

@code {
    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
                                                          //private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private List<FileListEntryImpl> selectedFiles = new List<FileListEntryImpl>();
    private static Action<FileListEntryImpl[]> action1;

    public ElementReference inputTypeFileElement;
    IFileReaderRef dropReference;

    public async Task UploadFiles()
    {
        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);

        await dropReference.IsDragTargetElement(targets);
        System.Threading.Thread.Sleep(500);
        await dropReference.AppendDragTargetElement(targets);

        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Debug.WriteLine("FileName:" + fileInfo.Path + fileInfo.Name);
            if (fileInfo.Dir == "Dir")
                continue;

            // Read into memory and act
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(16 * 1024))
            {
                // Sync calls are ok once file is in memory

                string filepath = "D:\\file\\" + fileInfo.Name;
                try
                {
                    int read = 0;
                    FileStream fs;
                    fs = new FileStream(filepath, FileMode.Create, FileAccess.Write);

                    while ((read = memoryStream.Read(buffer, 0, buffer.Length)) > 0)
                    {
                        fs.Write(buffer, 0, read);
                    }
                    fs.Close();

                }
                catch(Exception ex)
                {
                    Debug.WriteLine(ex.StackTrace);
                }
            }
        }

        //탐색기 전달파일 종료 및 UI 내부 Drag 파일 핸들링(디렉토리인경우 디렉토리 분기 타야함,DirFileSearch함수 참고)
        foreach (FileListEntryImpl item in selectedFiles)
        {
            if (item.RelativePath == null)
                continue;

            try
            {
                int read = 0;
                FileStream rfs;
                FileStream wfs;
                rfs = new FileStream(item.RelativePath, FileMode.Open, FileAccess.Read);
                wfs = new FileStream("D:\\file\\" + item.Name, FileMode.Create, FileAccess.Write);
                byte[] buffer = new byte[16 * 1024];

                while ((read = rfs.Read(buffer, 0, buffer.Length)) > 0)
                {
                    wfs.Write(buffer, 0, read);
                }
                rfs.Close();
                wfs.Close();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.StackTrace);
            }
        }

        await dropReference.ClearValue();
        await dropReference.initFileReaderService(targets);
        await dropReference.DelDragTargetElementAsync(targets);

        selectedFiles.Clear();
        StateHasChanged();
        object[] param = { "success", "시스템", "자료전송이 완료되었습니다." };
        await jsRuntime.InvokeAsync<object>("fireToastMessage", param);

    }

    //디렉토리 검색 함수
    void DirFileSearch(string path)
    {
        try
        {
            string[] dirs = Directory.GetDirectories(path);
            string[] files = Directory.GetFiles(path);
            foreach(string f in files)
            {
                Console.WriteLine(f);
            }
            if(dirs.Length > 0)
            {
                foreach(string dir in dirs)
                {
                    DirFileSearch(dir);
                }
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    [JSInvokable("NotifyChange")]
    public static void NotifyChange(FileListEntryImpl[] files)
    {
        action1.Invoke(files);
    }

    void OnDrop(List<string> list)
    {
        for (int i = 0; i < list.Count; i++)
        {
            Console.WriteLine("File Dropped  {data}");
            string data = list[i];
            if (data != null && data.Length > 0)
            {
                bool bFind = false;
                foreach (var item in selectedFiles)
                {
                    if (item.RelativePath == data)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                    continue;

                System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
                FileAttributes attr = fInfo.Attributes;
                if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                {
                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = fInfo.Name;
                    fileEntry.Size = fInfo.Length;
                    fileEntry.RelativePath = fInfo.FullName;
                    if (fInfo.Name.LastIndexOf(".") > -1)
                        fileEntry.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf("."));
                    else
                        fileEntry.Type = "";
                    fileEntry.LastModified = fInfo.LastWriteTime;
                    selectedFiles.Add(fileEntry);
                }
                else if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = fInfo.Name;
                    fileEntry.Size = 0;
                    fileEntry.RelativePath = fInfo.FullName;
                    fileEntry.Type = "DIR";
                    fileEntry.LastModified = fInfo.LastWriteTime;
                    selectedFiles.Add(fileEntry);
                }
            }
        }
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        action1 = HandleFileInputChange;
    }
    private void onDrop()
    {
        Console.WriteLine("OnDrop Event Occured");
    }

    private void HandleDrop()
    {
        Console.WriteLine("HandleDrop Event Occured");
    }

    private void HandleClick()
    {
        Console.WriteLine("Click Event Occured");
    }

    private void HandleDragEnter()
    {
        //dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        //dropClass = "";
    }

    private void HandleFileInputChange(IFileListEntry[] files)
    {
        //dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        // Disable file type error-1
        //List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }
                // Disable file type error-2
                //if (!acceptedFileTypes.Contains(file.Type))
                //{
                //    error = true;
                //    fileTypeError = true;
                //}
                //중복제거
                bool bFind = false;
                foreach (var item in selectedFiles)
                {
                    if (item.Name == file.Name)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                    continue;


                //keep the good files
                if (!error)
                {
                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = file.Name;
                    fileEntry.Size = file.Size;
                    fileEntry.RelativePath = file.RelativePath;
                    if (file.Name.LastIndexOf(".") > -1)
                        fileEntry.Type = file.Name.Substring(file.Name.LastIndexOf("."));
                    else
                        fileEntry.Type = "";
                    fileEntry.LastModified = file.LastModified;
                    selectedFiles.Add(fileEntry);
                }
            }
        }
        StateHasChanged();
    }

    private void RemoveFile(IFileListEntry file)
    {
        FileListEntryImpl fileEntry = new FileListEntryImpl();
        fileEntry.Name = file.Name;
        fileEntry.Size = file.Size;
        fileEntry.RelativePath = file.RelativePath;
        fileEntry.Type = file.GetType().FullName;

        selectedFiles.Remove(fileEntry);
    }

    public void RemoveAllFile()
    {
        selectedFiles.Clear();
        StateHasChanged();
    }

    //DropZone 클릭방지코드
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        return stopClick();
    }
    private async Task stopClick()
    {
        await jsRuntime.InvokeAsync<object>("stopClick");

        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.RegisterDropEventsAsync(true);
    }
}
