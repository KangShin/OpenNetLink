@implements IDisposable
@inject IJSRuntime JSRuntime

<input type="file" id="fileInput"  @ref="inputFileElement" @onchange="changedEvent" @attributes="UnmatchedParameters" />

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> UnmatchedParameters { get; set; }
    [Parameter] public EventCallback<IFileListEntry[]> OnChange { get; set; }
    [Parameter] public int MaxMessageSize { get; set; } = 20 * 1024; // TODO: Use SignalR default
    [Parameter] public int MaxBufferSize { get; set; } = 1024 * 1024;

    ElementReference inputFileElement;
    IDisposable thisReference;

    [JSInvokable("OpenNetLinkApp")]
    public Task NotifyChange(FileListEntryImpl[] files)
    {
        Console.WriteLine(files);
        foreach (var file in files)
        {
            // So that method invocations on the file can be dispatched back here
            file.Owner = (InputFile)(object)this;
        }

        return OnChange.InvokeAsync(files);
    }

    /*
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            thisReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<object>("BlazorInputFile.init", inputFileElement, thisReference);
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            thisReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeAsync<object>("BlazorInputFile.init", inputFileElement, thisReference);
        }
    }
    */
    public void changedEvent()
    {
        thisReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeAsync<object>("BlazorInputFile.init", inputFileElement, thisReference);
    }

    internal Stream OpenFileStream(FileListEntryImpl file)
    {
        return SharedMemoryFileListEntryStream.IsSupported(JSRuntime)
            ? (Stream)new SharedMemoryFileListEntryStream(JSRuntime, inputFileElement, file)
            : new RemoteFileListEntryStream(JSRuntime, inputFileElement, file, MaxMessageSize, MaxBufferSize);
    }

    internal async Task<FileListEntryImpl> ConvertToImageFileAsync(FileListEntryImpl file, string format, int maxWidth, int maxHeight)
    {
        var imageFile = await JSRuntime.InvokeAsync<FileListEntryImpl>("BlazorInputFile.toImageFile", inputFileElement, file.Id, format, maxWidth, maxHeight);

        // So that method invocations on the file can be dispatched back here
        imageFile.Owner = (InputFile)(object)this;

        return imageFile;
    }

    void IDisposable.Dispose()
    {
        thisReference?.Dispose();
    }
}